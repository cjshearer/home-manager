[
    {
        binary_signed: -0b10010,
        binary_unsigned: 0b10010,
        decimal_signed: -10,
        decimal_unsigned: 10,
        byte: b'0',
        float_64: -0.100000f64,
        float_exp: -1.000000e-16,
        float_int: 1000,
        float_std: 1000.000000,
        integer: 0,
        integer_32: 8i32,
        unsigned_hexadecimal: 0xFF,
        unsigned_octal: 0o10
    },
    {
        char: 'a'
    },
    {
        byte_string_raw: br##"Hello, World!"##,
        byte_string_std: b"Hello, World!",
        string_escape_ascii: "\'",
        string_escape_byte: "\x0A",
        string_escape_unicode: "\u{0A0A}",
        string_raw: r##"This is a "raw string".
It can contain quotations or backslashes\!"##,
        string_std: "Hello, World!"
    },
    {
        boolean: true
    },
    {
        enum_named_map: Some(map: {}),
        enum_named_struct: Some(struct: ANestedStruct(
            a: 1
        ))
        enum_named: Some(named: "field"),
        enum_none: None
        enum_tuple: Some("enum",
            "values"
        ),
        enum_tuple_list: Some([
            "list",
            "of",
            "strings"
        ]),
        enum_tuple_string: Some("string"),
        enum_tuple_tuple: Some((
            "another",
            "tuple"
        ))
    },
    {
        list: [
            1,
            2,
            3
        ]
    },
    {
        ("complex","keys"): "a tuple can also be a key",
        map: {
            a: 1,
            b: 2,
            c: 3
        },
        map_empty: {}
    },
    {
        tuple: (
            1,
            2,
            3
        )
    },
    {
        named_struct: NamedStruct(
            a: 1,
            b: 2,
            c: 3
        ),
        tuple_struct: TupleStruct(
            1,
            2,
            3
        ),
        unit_struct: (),
        unit_struct_ident: MyUnitStruct
    }
]